name: Deploy to ECR and App Runner

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'production' || 'staging' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        IMAGE_TAG: ${{ github.ref_name }}-${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./cde
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
    - name: Update App Runner service
      env:
        SERVICE_ARN: ${{ secrets.APPRUNNER_SERVICE_ARN }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        IMAGE_TAG: ${{ github.ref_name }}-${{ github.sha }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        # Update App Runner service to use new image
        aws apprunner update-service \
          --service-arn $SERVICE_ARN \
          --source-configuration '{"ImageRepository":{"ImageIdentifier":"'$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG'","ImageConfiguration":{"Port":"8000"},"ImageRepositoryType":"ECR"}}' \
          --region $AWS_REGION
        
    - name: Check deployment status
      env:
        SERVICE_ARN: ${{ secrets.APPRUNNER_SERVICE_ARN }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        echo "Waiting for deployment to complete..."
        aws apprunner wait service-updated --service-arn $SERVICE_ARN --region $AWS_REGION
        
        # Get current service status
        SERVICE_STATUS=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query 'Service.Status' --output text --region $AWS_REGION)
        IMAGE_URI=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query 'Service.SourceConfiguration.ImageRepository.ImageIdentifier' --output text --region $AWS_REGION)
        
        echo "Service Status: $SERVICE_STATUS"
        echo "Current Image: $IMAGE_URI"
        
        if [ "$SERVICE_STATUS" = "RUNNING" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed with status: $SERVICE_STATUS"
          exit 1
        fi